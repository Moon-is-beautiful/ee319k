


ARM Macro Assembler    Page 1 


    1 00000000         ; BusyWait.s
    2 00000000         ; Student names: Samuel Kuang & Zihao Hong
    3 00000000         ; Last modification date: 10/25/2022
    4 00000000         
    5 00000000         ; Runs on TM4C123
    6 00000000         ; Use SPI to send an 8-bit code to the LCD.
    7 00000000         
    8 00000000         ; As part of Lab 7, students need to implement these out
                       command and outdata
    9 00000000         ; This driver assumes two low-level LCD functions
   10 00000000         ; this file is in the inc folder so it automatically wil
                       l be applied to labs 7 8 9 and 10
   11 00000000         
   12 00000000                 EXPORT           SPIOutCommand
   13 00000000                 EXPORT           SPIOutData
   14 00000000         
   15 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   16 00000000                 THUMB
   17 00000000                 ALIGN
   18 00000000         ; Used in ECE319K Labs 7,8,9,10. You write these two fun
                       ctions
   19 00000000         
   20 00000000         ; ***********SPIOutCommand*****************
   21 00000000         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   22 00000000         ; Inputs: R0 = 32-bit command (number)
   23 00000000         ;         R1 = 32-bit SPI status register address
   24 00000000         ;         R2 = 32-bit SPI data register address
   25 00000000         ;         R3 = 32-bit GPIO port address for D/C
   26 00000000         ; Outputs: none
   27 00000000         ; Assumes: SPI and GPIO have already been initialized an
                       d enabled
   28 00000000         ; Note: must be AAPCS compliant
   29 00000000         ; Note: access to bit 6 of GPIO must be friendly
   30 00000000         SPIOutCommand
   31 00000000         ; --UUU-- Code to write a command to the LCD
   32 00000000         ;1) Read the SPI status register (R1 has address) and ch
                       eck bit 4, 
   33 00000000         ;2) If bit 4 is high, loop back to step 1 (wait for BUSY
                        bit to be low)
   34 00000000         ;3) Clear D/C (GPIO bit 6) to zero, be friendly (R3 has 
                       address)
   35 00000000         ;4) Write the command to the SPI data register (R2 has a
                       ddress)
   36 00000000         ;5) Read the SPI status register (R1 has address) and ch
                       eck bit 4, 
   37 00000000         ;6) If bit 4 is high, loop back to step 5 (wait for BUSY
                        bit to be low)
   38 00000000 E92D 4FF0       PUSH             {R4-R11, LR}
   39 00000004         first
   40 00000004 680C            LDR              R4,[R1]
   41 00000006 F004 0410       AND              R4,#0x10
   42 0000000A 2C10            CMP              R4,#0x10
   43 0000000C D0FA            BEQ              first
   44 0000000E         
   45 0000000E 681C            LDR              R4,[R3]
   46 00000010 F024 0440       BIC              R4,#0x40
   47 00000014 601C            STR              R4,[R3]



ARM Macro Assembler    Page 2 


   48 00000016 6010            STR              R0,[R2]
   49 00000018         
   50 00000018         second
   51 00000018 680C            LDR              R4,[R1]
   52 0000001A F004 0410       AND              R4,#0x10
   53 0000001E 2C10            CMP              R4,#0x10
   54 00000020 D0FA            BEQ              second
   55 00000022 E8BD 4FF0       POP              {R4-R11, LR}
   56 00000026         
   57 00000026         
   58 00000026 4770            BX               LR          ;   return
   59 00000028         
   60 00000028         
   61 00000028         
   62 00000028         ; **SPIOutData**
   63 00000028         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
   64 00000028         ; Inputs: R0 = 32-bit data (number)
   65 00000028         ;         R1 = 32-bit SPI status register address
   66 00000028         ;         R2 = 32-bit SPI data register address
   67 00000028         ;         R3 = 32-bit GPIO port address for D/C
   68 00000028         ; Outputs: none
   69 00000028         ; Assumes: SPI and GPIO have already been initialized an
                       d enabled
   70 00000028         ; Note: must be AAPCS compliant
   71 00000028         ; Note: access to bit 6 of GPIO must be friendly
   72 00000028         SPIOutData
   73 00000028         ; --UUU-- Code to write data to the LCD
   74 00000028         ;1) Read the SPI status register (R1 has address) and ch
                       eck bit 1, 
   75 00000028         ;2) If bit 1 is low, loop back to step 1 (wait for TNF b
                       it to be high)
   76 00000028         ;3) Set D/C (GPIO bit 6) to one, be friendly (R3 has add
                       ress)
   77 00000028         ;4) Write the data to the SPI data register (R2 has addr
                       ess)
   78 00000028 E92D 4FF0       PUSH             {R4-R11, LR}
   79 0000002C         first1
   80 0000002C 680C            LDR              R4,[R1]
   81 0000002E F004 0402       AND              R4,#0x02
   82 00000032 2C02            CMP              R4,#0x02
   83 00000034 D1FA            BNE              first1
   84 00000036         
   85 00000036 681C            LDR              R4,[R3]
   86 00000038 F044 0440       ORR              R4,#0x40
   87 0000003C 601C            STR              R4,[R3]
   88 0000003E 6010            STR              R0,[R2]
   89 00000040 E8BD 4FF0       POP              {R4-R11, LR}
   90 00000044         
   91 00000044         
   92 00000044 4770            BX               LR          ;return 
   93 00000046         ;****************************************************
   94 00000046         
   95 00000046 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
   96 00000048                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\busywait.d -o.\busywait.o -I.\RTE\_Lab9 -IC:\Users\hzh85\AppData



ARM Macro Assembler    Page 3 


\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\hzh85\AppData\Lo
cal\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SE
TA 1" --predefine="__UVISION_VERSION SETA 534" --predefine="_RTE_ SETA 1" --pre
define="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\busywait.lst .
.\inc\BusyWait.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 15 in file ..\inc\BusyWait.s
   Uses
      None
Comment: .text unused
SPIOutCommand 00000000

Symbol: SPIOutCommand
   Definitions
      At line 30 in file ..\inc\BusyWait.s
   Uses
      At line 12 in file ..\inc\BusyWait.s
Comment: SPIOutCommand used once
SPIOutData 00000028

Symbol: SPIOutData
   Definitions
      At line 72 in file ..\inc\BusyWait.s
   Uses
      At line 13 in file ..\inc\BusyWait.s
Comment: SPIOutData used once
first 00000004

Symbol: first
   Definitions
      At line 39 in file ..\inc\BusyWait.s
   Uses
      At line 43 in file ..\inc\BusyWait.s
Comment: first used once
first1 0000002C

Symbol: first1
   Definitions
      At line 79 in file ..\inc\BusyWait.s
   Uses
      At line 83 in file ..\inc\BusyWait.s
Comment: first1 used once
second 00000018

Symbol: second
   Definitions
      At line 50 in file ..\inc\BusyWait.s
   Uses
      At line 54 in file ..\inc\BusyWait.s
Comment: second used once
6 symbols
340 symbols in table
